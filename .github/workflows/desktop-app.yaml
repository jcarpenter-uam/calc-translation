name: Build and Release Desktop

#  This workflow runs when you push a tag starting with 'v'
#  and ending with '-desktop' (e.g., v1.0.0-desktop, v1.0.1-desktop)
on:
  push:
    tags:
      - "v*.*.*-desktop"

permissions:
  contents: write

env:
  QT_VERSION: "6.8.3" # Last LTS
  WORKING_DIR: "desktop-app"
  PROJECT_FILE: "CALC_Zoom_Translation.qt.pro"
  PROJECT_NAME: "CALC_Zoom_Translation"

jobs:
  # -------------------------------------------------------------------
  #                       BUILD LINUX
  # -------------------------------------------------------------------
  # build-linux:
  #   name: Build Linux (AppImage)
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v4
  #
  #     - name: Install Qt
  #       uses: jurplel/install-qt-action@v4
  #       with:
  #         version: ${{ env.QT_VERSION }}
  #         arch: "gcc_64"
  #         modules: "qtwebengine"
  #         cache: false
  #
  #     - name: Build the application
  #       working-directory: ${{ env.WORKING_DIR }}
  #       run: |
  #         qmake ${{ env.PROJECT_FILE }}
  #         make -j $(nproc)
  #
  #     - name: Download linuxdeployqt
  #       working-directory: ${{ env.WORKING_DIR }}
  #       run: |
  #         wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
  #         chmod +x linuxdeployqt-continuous-x86_64.AppImage
  #
  #     - name: Package as AppImage
  #       working-directory: ${{ env.WORKING_DIR }}
  #       run: |
  #         ./linuxdeployqt-continuous-x86_64.AppImage ${{ env.PROJECT_NAME }} -appimage
  #
  #     - name: Upload Artifact (Linux)
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: linux-appimage
  #         path: ${{ env.WORKING_DIR }}/${{ env.PROJECT_NAME }}*.AppImage

  # -------------------------------------------------------------------
  #                       BUILD MACOS
  # -------------------------------------------------------------------
  # build-macos:
  #   name: Build macOS (DMG)
  #   runs-on: macos-latest
  #
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v4
  #
  #     - name: Install Qt
  #       uses: jurplel/install-qt-action@v3
  #       with:
  #         version: ${{ env.QT_VERSION }}
  #         arch: ${{ runner.arch == 'ARM64' && 'arm64' || 'x64' }}
  #         modules: "qtbase qtwebengine"
  #         cache: false
  #
  #     - name: Build the application
  #       working-directory: ${{ env.WORKING_DIR }}
  #       run: |
  #         qmake ${{ env.PROJECT_FILE }}
  #         make -j $(sysctl -n hw.ncpu)
  #
  #     - name: Package as .dmg
  #       working-directory: ${{ env.WORKING_DIR }}
  #       run: |
  #         macdeployqt ${{ env.PROJECT_NAME }}.app -dmg
  #
  #     - name: Upload Artifact (macOS)
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: macos-dmg
  #         path: ${{ env.WORKING_DIR }}/${{ env.PROJECT_NAME }}.dmg

  # -------------------------------------------------------------------
  #                       BUILD WINDOWS
  # -------------------------------------------------------------------
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          arch: win64_msvc2022_64
          modules: qtwebengine qtwebchannel qtpositioning
          cache: false

      - run: choco install jom -y

      - uses: microsoft/setup-msbuild@v2
        with: { vs-version: "17.0" }

      - uses: ilammy/msvc-dev-cmd@v1
        with: { arch: x64 }

      - name: Build (Release)
        working-directory: ${{ env.WORKING_DIR }}
        shell: pwsh
        run: |
          qmake $env:PROJECT_FILE -spec win32-msvc "CONFIG+=release"
          jom

      - name: Find built EXE
        id: findexe
        working-directory: ${{ env.WORKING_DIR }}
        shell: pwsh
        run: |
          $exe = Get-ChildItem -Path "release" -Filter *.exe -ErrorAction SilentlyContinue |
                 Where-Object { $_.Name -notmatch 'QtWebEngineProcess|vc_redist' } |
                 Select-Object -First 1
          if (-not $exe) { throw "No app EXE found in .\release" }
          "EXE=$($exe.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "Using EXE: $($exe.FullName)"

      - name: Package as .zip
        working-directory: ${{ env.WORKING_DIR }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path deploy | Out-Null
          $exe = "${{ steps.findexe.outputs.EXE }}"
          # Qt 6: do NOT pass --webengine
          windeployqt --release --dir deploy "$exe"
          Copy-Item -Force "$exe" deploy\      # ensure the app exe is present
          Compress-Archive -Path 'deploy\*' -DestinationPath "${{ env.PROJECT_NAME }}_Windows_x64.zip" -Force

      - uses: actions/upload-artifact@v4
        with:
          name: windows-zip
          path: ${{ env.WORKING_DIR }}/${{ env.PROJECT_NAME }}_Windows_x64.zip

  # -------------------------------------------------------------------
  #                   CREATE GITHUB RELEASE
  # -------------------------------------------------------------------
  create-release:
    name: Create GitHub Release
    # needs: [build-linux, build-macos, build-windows]
    needs: [build-windows]
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release and Upload Assets
        uses: ncipollo/release-action@v1
        with:
          artifacts: "artifacts/*/*.*"
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release ${{ github.ref_name }}
          body: ${{ github.event.head_commit.message }}
          allowUpdates: true
