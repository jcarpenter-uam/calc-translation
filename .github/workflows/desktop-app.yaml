name: Build and Release Desktop

#  This workflow runs when you push a tag starting with 'v'
#  and ending with '-desktop' (e.g., v1.0.0-desktop, v1.0.1-desktop)
on:
  push:
    tags:
      - "v*.*.*-desktop"

env:
  QT_VERSION: "6.8.3" # Last LTS
  WORKING_DIR: "desktop-app"
  PROJECT_FILE: "CALC_Zoom_Translation.qt.pro"
  PROJECT_NAME: "CALC_Zoom_Translation.qt"

jobs:
  # -------------------------------------------------------------------
  #                       BUILD LINUX
  # -------------------------------------------------------------------
  # build-linux:
  #   name: Build Linux (AppImage)
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v4
  #
  #     - name: Install Qt
  #       uses: jurplel/install-qt-action@v4
  #       with:
  #         version: ${{ env.QT_VERSION }}
  #         arch: "gcc_64"
  #         modules: "qtwebengine"
  #         cache: false
  #
  #     - name: Build the application
  #       working-directory: ${{ env.WORKING_DIR }}
  #       run: |
  #         qmake ${{ env.PROJECT_FILE }}
  #         make -j $(nproc)
  #
  #     - name: Download linuxdeployqt
  #       working-directory: ${{ env.WORKING_DIR }}
  #       run: |
  #         wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
  #         chmod +x linuxdeployqt-continuous-x86_64.AppImage
  #
  #     - name: Package as AppImage
  #       working-directory: ${{ env.WORKING_DIR }}
  #       run: |
  #         ./linuxdeployqt-continuous-x86_64.AppImage ${{ env.PROJECT_NAME }} -appimage
  #
  #     - name: Upload Artifact (Linux)
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: linux-appimage
  #         path: ${{ env.WORKING_DIR }}/${{ env.PROJECT_NAME }}*.AppImage

  # -------------------------------------------------------------------
  #                       BUILD MACOS
  # -------------------------------------------------------------------
  # build-macos:
  #   name: Build macOS (DMG)
  #   runs-on: macos-latest
  #
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v4
  #
  #     - name: Install Qt
  #       uses: jurplel/install-qt-action@v3
  #       with:
  #         version: ${{ env.QT_VERSION }}
  #         arch: ${{ runner.arch == 'ARM64' && 'arm64' || 'x64' }}
  #         modules: "qtbase qtwebengine"
  #         cache: false
  #
  #     - name: Build the application
  #       working-directory: ${{ env.WORKING_DIR }}
  #       run: |
  #         qmake ${{ env.PROJECT_FILE }}
  #         make -j $(sysctl -n hw.ncpu)
  #
  #     - name: Package as .dmg
  #       working-directory: ${{ env.WORKING_DIR }}
  #       run: |
  #         macdeployqt ${{ env.PROJECT_NAME }}.app -dmg
  #
  #     - name: Upload Artifact (macOS)
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: macos-dmg
  #         path: ${{ env.WORKING_DIR }}/${{ env.PROJECT_NAME }}.dmg

  # -------------------------------------------------------------------
  #                       BUILD WINDOWS
  # -------------------------------------------------------------------
  build-windows:
    name: Build Windows (zip)
    runs-on: windows-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          arch: "win64_msvc2022_64"
          modules: "qtwebengine"
          cache: false

      - name: Install jom (parallel nmake)
        run: choco install jom

      - name: Setup MSVC Build Tools
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: "17.0"

      - name: Setup Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Build the application
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          qmake ${{ env.PROJECT_FILE }}
          jom

      - name: Package as .zip
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          mkdir deploy

          windeployqt --release --webengine --dir deploy release/${{ env.PROJECT_NAME }}.exe

          powershell: Compress-Archive -Path deploy -DestinationPath ${{ env.PROJECT_NAME }}_Windows_x64.zip

      - name: Upload Artifact (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: windows-zip
          path: ${{ env.WORKING_DIR }}/${{ env.PROJECT_NAME }}_Windows_x64.zip

  # -------------------------------------------------------------------
  #                   CREATE GITHUB RELEASE
  # -------------------------------------------------------------------
  create-release:
    name: Create GitHub Release
    # needs: [build-linux, build-macos, build-windows]
    needs: [build-windows]
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release and Upload Assets
        uses: ncipollo/release-action@v1
        with:
          artifacts: "artifacts/*/*.*"
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release ${{ github.ref_name }}
          body: ${{ github.event.head_commit.message }}
          allowUpdates: true
